{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf480
{\fonttbl\f0\fswiss\fcharset77 Arial-BoldMT;\f1\fswiss\fcharset77 ArialMT;\f2\fswiss\fcharset77 Arial-ItalicMT;
\f3\fswiss\fcharset77 Arial-BoldItalicMT;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10500\viewh9600\viewkind0
\deftab720
\pard\pardeftab720\sl340\ql\qnatural

\f0\b\fs26 \cf0 English Test Language Doc
\f1\b0 \
\'ca\'ca
\f2\i \'ca Timothy McDowell, Devyn Cairns [other contributors here]
\f1\i0 \
\'ca\'ca\'ca\'ca\
\'ca\'ca\'ca I would like all people who drop by here to insert there own ideas and improvements. Just save a revision before you start editing.\
\
Important features:\
\'ca\'ca\'ca \ul Sentences\ulnone \
\'ca\'ca\'ca \ul Nouns\ulnone \
\'ca\'ca\'ca \ul And\ulnone \
\'ca\'ca\'ca \ul Pronouns\ulnone \
\'ca\'ca\'ca \ul Verbs\ulnone \
\'ca\'ca\'ca \ul Structs\ulnone \
\'ca\'ca\'ca\'ca\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca 
\f0\b Sentences
\f1\b0 \
\
ETL statements are organized into 'sentences'. Instead of a semicolon on the end of a statement, there is a period.\
\'ca
\f3\i\b \'ca\'ca display the string "Hello, World!".
\f1\i0\b0 \
\'ca\'ca\'ca\'ca\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca 
\f0\b NOUNS
\f1\b0 \
\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\
A noun in ETL is just another name for a variable. However, like a noun in english, it can be refered to with a pronoun.\
\'ca\'ca
\f3\i\b \'ca create number x.
\f1\i0\b0 \
Nouns can be set to different values within their type.\
\'ca
\f3\i\b \'ca\'ca set x to 5.
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca\'ca\'ca\'ca\'ca x = 5
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca set x to x - 1.
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca\'ca\'ca\'ca\'ca x = 4
\f1\i0\b0 \
Temporary nouns can also be created using the keyword 'the'.\
\'ca\'ca
\f3\i\b \'ca if x == the number 7 then
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca\'ca\'ca\'ca\'ca display "Chocolate!".
\f1\i0\b0 \
\'ca\'ca\'ca\'ca\'ca\'ca\'ca 
\f2\i [Devyn Cairns] Maybe try to experiment with things like "if x is equal to the number 7 then" or "if x is the number 7 then", more English-like that way and not that much harder :)
\f1\i0 \
\
However, the 'the' keyword doesn't need to be used. Use whichever looks and feels nicer to you!\
\'ca\'ca\'ca
\f3\i\b  if x == 7 then ... .
\f1\i0\b0 \
\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca
\f0\b  AND
\f1\b0 \
\
The keyword 'and' is used to create groups. It's hard to explain, so some examples...\
\'ca\'ca\'ca
\f3\i\b  create number x and number y.
\f1\i0\b0 \
\'ca\'ca\'ca 
\f2\i [Devyn Cairns] How about "create numbers x and y"
\f1\i0 \
This creates two variables, like 'x,y = 0' in Ruby.\
\'ca
\f3\i\b \'ca\'ca create number x and set it to 5.
\f1\i0\b0 \
This links together two sentences, like in english. It runs both statements. It is the same as: create number x. set it to 5.\
\'ca
\f3\i\b \'ca\'ca create number x and number y and set them to 4 and 5.
\f1\i0\b0 \
The pronoun group (more on this later) 'them' is created, and 'set' is called on each item, assigning each value respectively. Same as:\

\f3\i\b \'ca\'ca\'ca create number x. create number y. set x to 4. set y to 5.
\f1\i0\b0 \
\
\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca 
\f0\b PRONOUNS
\f1\b0 \
\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\
Pronouns are just like in the english language, kinda...\
\'ca\'ca\'ca
\f3\i\b  create number x and set it to 3.
\f1\i0\b0 \
It is always an usable pronoun refering to the last referenced noun. However, if you have:\
\'ca\'ca\'ca 
\f3\i\b create number x and number y.
\f1\i0\b0 \
It still refers to the last referenced noun, that is, y. However, in this situation, the pronoun group 'them' is called.\
\'ca\'ca\'ca
\f3\i\b  create number x and number y and set them to 5 and 6.
\f1\i0\b0 \
What if you had a custom struct type and wanted to set a variable in the struct?\
\'ca\'ca
\f3\i\b \'ca create player x and set its position to [5, 5].
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca create player x and player y and se their position to [5, 5] and [7, 5].
\f1\i0\b0 \
What if x and y were different structs?\
\'ca
\f0\b \'ca\'ca create player x and vector y. set x's position to [5, 5] and set y's xcoordinate to [7, 5].
\f1\b0 \
\'ca\'ca\'ca LIST OF PRONOUNS\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca it\'ca\'ca\'ca its\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca them\'ca\'ca\'ca their\
\
\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca 
\f0\b VERBS
\f1\b0 \
\
Verbs are like functions/methods in other programming languages. They can be used on a group, or on single arguments. Create is an example of a verb.\
\'ca\'ca\'ca
\f3\i\b  create verb 'addtwo to [number x]' and set it to
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca\'ca\'ca\'ca\'ca return x +2
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca create number anum and set it to 3.
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca set anum to the result of [addtwo to anum]. # <--- NEED HELP WITH THIS SYNTAX!
\f1\i0\b0 \
\'ca\'ca\'ca\'ca\'ca\'ca\'ca 
\f2\i [Devyn Cairns] How's that? And I suppose you could make "the result of" optional.
\f1\i0 \
\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca
\f0\b  STRUCTS
\f1\b0 \
\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\
Structs are a collection of verbs and nouns.\

\f0\b \'ca\'ca\'ca 
\f3\i create struct player that contains
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca\'ca\'ca\'ca\'ca the number position which is set by default to [0,0],
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca\'ca\'ca\'ca\'ca the string name.
\f1\i0\b0 \

\f3\i\b \'ca\'ca\'ca create player x and set its position to [5, 4]. set its name to "Bob".
\f1\i0\b0 \
\'ca\'ca\'ca\'ca\'ca\'ca\'ca 
\f2\i [Devyn Cairns] That looks much cleaner.
\f1\i0 \
}