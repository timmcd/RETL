# Autogenerated from a Treetop grammar. Edits may be lost.


require 'treetop'
require 'etl/pdef'

module ETL
  module Grammar
    include Treetop::Runtime

    def root
      @root || :script
    end

    def _nt_script
      start_index = index
      if node_cache[:script].has_key?(index)
        cached = node_cache[:script][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        r1 = _nt_sentence
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(ScriptNode,input, i0...index, s0)
      end

      node_cache[:script][start_index] = r0

      r0
    end

    module Sentence0
      def space1
        elements[0]
      end

      def space2
        elements[2]
      end

      def statement
        elements[3]
      end
    end

    module Sentence1
      def statement
        elements[1]
      end

      def opt
        elements[2]
      end

    end

    def _nt_sentence
      start_index = index
      if node_cache[:sentence].has_key?(index)
        cached = node_cache[:sentence][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r2 = _nt_space
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        r3 = _nt_statement
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            r6 = _nt_space
            s5 << r6
            if r6
              if has_terminal?('and', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure('and')
                r7 = nil
              end
              s5 << r7
              if r7
                r8 = _nt_space
                s5 << r8
                if r8
                  r9 = _nt_statement
                  s5 << r9
                end
              end
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Sentence0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
          if r4
            if has_terminal?('.', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('.')
              r10 = nil
            end
            s0 << r10
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SentenceNode,input, i0...index, s0)
        r0.extend(Sentence1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:sentence][start_index] = r0

      r0
    end

    module Statement0
      def argument
        elements[1]
      end
    end

    module Statement1
    end

    module Statement2
      def space
        elements[0]
      end

      def a
        elements[1]
      end

    end

    module Statement3
      def verb
        elements[0]
      end

      def arguments
        elements[1]
      end
    end

    def _nt_statement
      start_index = index
      if node_cache[:statement].has_key?(index)
        cached = node_cache[:statement][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = _nt_verb
      if r2
        r1 = r2
      else
        r3 = _nt_verbcalled
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      s0 << r1
      if r1
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          r6 = _nt_space
          s5 << r6
          if r6
            r7 = _nt_argument
            s5 << r7
            if r7
              i8 = index
              i9, s9 = index, []
              if has_terminal?(',', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(',')
                r10 = nil
              end
              s9 << r10
              if r10
                i11 = index
                i12, s12 = index, []
                r14 = _nt_space
                if r14
                  r13 = r14
                else
                  r13 = instantiate_node(SyntaxNode,input, index...index)
                end
                s12 << r13
                if r13
                  r15 = _nt_argument
                  s12 << r15
                end
                if s12.last
                  r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                  r12.extend(Statement0)
                else
                  @index = i12
                  r12 = nil
                end
                if r12
                  @index = i11
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                else
                  r11 = nil
                end
                s9 << r11
              end
              if s9.last
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                r9.extend(Statement1)
              else
                @index = i9
                r9 = nil
              end
              if r9
                r8 = r9
              else
                if has_terminal?('', false, index)
                  r16 = instantiate_node(SyntaxNode,input, index...(index + 0))
                  @index += 0
                else
                  terminal_parse_failure('')
                  r16 = nil
                end
                if r16
                  r8 = r16
                else
                  @index = i8
                  r8 = nil
                end
              end
              s5 << r8
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Statement2)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
      if s0.last
        r0 = instantiate_node(StatementNode,input, i0...index, s0)
        r0.extend(Statement3)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:statement][start_index] = r0

      r0
    end

    def _nt_space
      start_index = index
      if node_cache[:space].has_key?(index)
        cached = node_cache[:space][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[\\s]', true, index)
          next_character = index + input[index..-1].match(/\A(.)/um).end(1)
          r1 = true
          @index = next_character
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SpaceNode,input, i0...index, s0)
      end

      node_cache[:space][start_index] = r0

      r0
    end

    module Verbcalled0
      def s
        elements[1]
      end

    end

    def _nt_verbcalled
      start_index = index
      if node_cache[:verbcalled].has_key?(index)
        cached = node_cache[:verbcalled][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('[', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_statement
        s0 << r2
        if r2
          if has_terminal?(']', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(']')
            r3 = nil
          end
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(VerbCalledNode,input, i0...index, s0)
        r0.extend(Verbcalled0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:verbcalled][start_index] = r0

      r0
    end

    def _nt_verb
      start_index = index
      if node_cache[:verb].has_key?(index)
        cached = node_cache[:verb][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[A-Za-z-]', true, index)
          next_character = index + input[index..-1].match(/\A(.)/um).end(1)
          r1 = true
          @index = next_character
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(VerbNode,input, i0...index, s0)
      end

      node_cache[:verb][start_index] = r0

      r0
    end

    def _nt_argument
      start_index = index
      if node_cache[:argument].has_key?(index)
        cached = node_cache[:argument][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_verbcalled
      if r1
        r0 = r1
        r0.extend(ArgumentNode)
      else
        r2 = _nt_noun
        if r2
          r0 = r2
          r0.extend(ArgumentNode)
        else
          r3 = _nt_math
          if r3
            r0 = r3
            r0.extend(ArgumentNode)
          else
            r4 = _nt_type
            if r4
              r0 = r4
              r0.extend(ArgumentNode)
            else
              r5 = _nt_number
              if r5
                r0 = r5
                r0.extend(ArgumentNode)
              else
                r6 = _nt_text
                if r6
                  r0 = r6
                  r0.extend(ArgumentNode)
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end

      node_cache[:argument][start_index] = r0

      r0
    end

    module Noun0
      def space
        elements[1]
      end
    end

    module Noun1
      def space
        elements[1]
      end
    end

    module Noun2
      def type
        elements[0]
      end

      def space
        elements[1]
      end

    end

    module Noun3
      def space
        elements[2]
      end

      def property
        elements[3]
      end
    end

    module Noun4
      def name
        elements[2]
      end

    end

    def _nt_noun
      start_index = index
      if node_cache[:noun].has_key?(index)
        cached = node_cache[:noun][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      i2, s2 = index, []
      if has_terminal?('the', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('the')
        r3 = nil
      end
      s2 << r3
      if r3
        r4 = _nt_space
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Noun0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        i6, s6 = index, []
        r7 = _nt_type
        s6 << r7
        if r7
          r8 = _nt_space
          s6 << r8
          if r8
            i10, s10 = index, []
            if has_terminal?('of', false, index)
              r11 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('of')
              r11 = nil
            end
            s10 << r11
            if r11
              r12 = _nt_space
              s10 << r12
            end
            if s10.last
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              r10.extend(Noun1)
            else
              @index = i10
              r10 = nil
            end
            if r10
              r9 = r10
            else
              r9 = instantiate_node(SyntaxNode,input, index...index)
            end
            s6 << r9
          end
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Noun2)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          s13, i13 = [], index
          loop do
            i14 = index
            r15 = _nt_it
            if r15
              r14 = r15
            else
              if has_terminal?('\G[A-Za-z-]', true, index)
                next_character = index + input[index..-1].match(/\A(.)/um).end(1)
                r16 = true
                @index = next_character
              else
                r16 = nil
              end
              if r16
                r14 = r16
              else
                @index = i14
                r14 = nil
              end
            end
            if r14
              s13 << r14
            else
              break
            end
          end
          if s13.empty?
            @index = i13
            r13 = nil
          else
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          end
          s0 << r13
          if r13
            i18, s18 = index, []
            if has_terminal?("'", false, index)
              r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("'")
              r19 = nil
            end
            s18 << r19
            if r19
              if has_terminal?("s", false, index)
                r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("s")
                r21 = nil
              end
              if r21
                r20 = r21
              else
                r20 = instantiate_node(SyntaxNode,input, index...index)
              end
              s18 << r20
              if r20
                r22 = _nt_space
                s18 << r22
                if r22
                  r23 = _nt_noun
                  s18 << r23
                end
              end
            end
            if s18.last
              r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
              r18.extend(Noun3)
            else
              @index = i18
              r18 = nil
            end
            if r18
              r17 = r18
            else
              r17 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r17
          end
        end
      end
      if s0.last
        r0 = instantiate_node(NounNode,input, i0...index, s0)
        r0.extend(Noun4)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:noun][start_index] = r0

      r0
    end

    def _nt_it
      start_index = index
      if node_cache[:it].has_key?(index)
        cached = node_cache[:it][index]
        @index = cached.interval.end if cached
        return cached
      end

      if has_terminal?('it', false, index)
        r0 = instantiate_node(ItNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('it')
        r0 = nil
      end

      node_cache[:it][start_index] = r0

      r0
    end

    module Math0
      def space1
        elements[0]
      end

      def op
        elements[1]
      end

      def space2
        elements[2]
      end

      def n
        elements[3]
      end
    end

    module Math1
      def base
        elements[1]
      end

      def operations
        elements[2]
      end

    end

    def _nt_math
      start_index = index
      if node_cache[:math].has_key?(index)
        cached = node_cache[:math][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('(', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_number
        s0 << r2
        if r2
          s3, i3 = [], index
          loop do
            i4, s4 = index, []
            r5 = _nt_space
            s4 << r5
            if r5
              r6 = _nt_mathoperator
              s4 << r6
              if r6
                r7 = _nt_space
                s4 << r7
                if r7
                  r8 = _nt_number
                  s4 << r8
                end
              end
            end
            if s4.last
              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
              r4.extend(Math0)
            else
              @index = i4
              r4 = nil
            end
            if r4
              s3 << r4
            else
              break
            end
          end
          if s3.empty?
            @index = i3
            r3 = nil
          else
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          end
          s0 << r3
          if r3
            if has_terminal?(')', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r9 = nil
            end
            s0 << r9
          end
        end
      end
      if s0.last
        r0 = instantiate_node(MathNode,input, i0...index, s0)
        r0.extend(Math1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:math][start_index] = r0

      r0
    end

    def _nt_mathoperator
      start_index = index
      if node_cache[:mathoperator].has_key?(index)
        cached = node_cache[:mathoperator][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      if has_terminal?('+', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('+')
        r1 = nil
      end
      if r1
        r0 = r1
        r0.extend(MathOperatorNode)
      else
        if has_terminal?('-', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r2 = nil
        end
        if r2
          r0 = r2
          r0.extend(MathOperatorNode)
        else
          if has_terminal?('/', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('/')
            r3 = nil
          end
          if r3
            r0 = r3
            r0.extend(MathOperatorNode)
          else
            if has_terminal?('^', false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('^')
              r4 = nil
            end
            if r4
              r0 = r4
              r0.extend(MathOperatorNode)
            else
              if has_terminal?('*', false, index)
                r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('*')
                r5 = nil
              end
              if r5
                r0 = r5
                r0.extend(MathOperatorNode)
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:mathoperator][start_index] = r0

      r0
    end

    def _nt_struct
      start_index = index
      if node_cache[:struct].has_key?(index)
        cached = node_cache[:struct][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[A-Za-z-]', true, index)
          next_character = index + input[index..-1].match(/\A(.)/um).end(1)
          r1 = true
          @index = next_character
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(StructNode,input, i0...index, s0)
      end

      node_cache[:struct][start_index] = r0

      r0
    end

    def _nt_type
      start_index = index
      if node_cache[:type].has_key?(index)
        cached = node_cache[:type][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1 = index
      if has_terminal?('number', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('number')
        r2 = nil
      end
      if r2
        r1 = r2
        r1.extend(BuiltinTypeNode)
      else
        if has_terminal?('text', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('text')
          r3 = nil
        end
        if r3
          r1 = r3
          r1.extend(BuiltinTypeNode)
        else
          if has_terminal?('struct', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure('struct')
            r4 = nil
          end
          if r4
            r1 = r4
            r1.extend(BuiltinTypeNode)
          else
            if has_terminal?('verb', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('verb')
              r5 = nil
            end
            if r5
              r1 = r5
              r1.extend(BuiltinTypeNode)
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        r0 = r1
      else
        r6 = _nt_struct
        r6.extend(StructTypeNode)
        if r6
          r0 = r6
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:type][start_index] = r0

      r0
    end

    module Number0
      def n
        elements[1]
      end
    end

    module Number1
      def base
        elements[0]
      end

      def point
        elements[1]
      end
    end

    def _nt_number
      start_index = index
      if node_cache[:number].has_key?(index)
        cached = node_cache[:number][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      s1, i1 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          next_character = index + input[index..-1].match(/\A(.)/um).end(1)
          r2 = true
          @index = next_character
        else
          r2 = nil
        end
        if r2
          s1 << r2
        else
          break
        end
      end
      if s1.empty?
        @index = i1
        r1 = nil
      else
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      end
      s0 << r1
      if r1
        i4, s4 = index, []
        if has_terminal?('.', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r5 = nil
        end
        s4 << r5
        if r5
          s6, i6 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              next_character = index + input[index..-1].match(/\A(.)/um).end(1)
              r7 = true
              @index = next_character
            else
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          if s6.empty?
            @index = i6
            r6 = nil
          else
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          end
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Number0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(NumberNode,input, i0...index, s0)
        r0.extend(Number1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:number][start_index] = r0

      r0
    end

    module Text0
      def text_value; '"'; end
    end

    module Text1
    end

    module Text2
      def str
        elements[1]
      end
    end

    def _nt_text
      start_index = index
      if node_cache[:text].has_key?(index)
        cached = node_cache[:text][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('"', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('"')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3 = index
          if has_terminal?('\"', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            r4.extend(Text0)
            @index += 2
          else
            terminal_parse_failure('\"')
            r4 = nil
          end
          if r4
            r3 = r4
          else
            i5, s5 = index, []
            i6 = index
            if has_terminal?('"', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('"')
              r7 = nil
            end
            if r7
              r6 = nil
            else
              @index = i6
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r6
            if r6
              if index < input_length
                next_character = index + input[index..-1].match(/\A(.)/um).end(1)
                r8 = instantiate_node(SyntaxNode,input, index...next_character)
                @index = next_character
              else
                terminal_parse_failure("any character")
                r8 = nil
              end
              s5 << r8
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Text1)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r3 = r5
            else
              @index = i3
              r3 = nil
            end
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(TextNode,input, i0...index, s0)
        r0.extend(Text2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:text][start_index] = r0

      r0
    end

  end

  class GrammarParser < Treetop::Runtime::CompiledParser
    include Grammar
  end

end
